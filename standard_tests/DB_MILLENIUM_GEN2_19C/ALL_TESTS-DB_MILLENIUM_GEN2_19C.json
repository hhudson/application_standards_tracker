{"std_test":{"standard":{"standard_id":7837857267161810704439141202380776768,"standard_name":"Millenium Gen2","description":null,"compatibility_mode_id":21,"created":"2023-09-21T17:34:28.872000Z","created_by":"HAYDEN.H.HUDSON@ORACLE.COM","updated":"2023-09-21T17:34:28.872000Z","updated_by":"HAYDEN.H.HUDSON@ORACLE.COM"}},"test":[{"test_id":7943001359216404021651022932909270314,"test_name":"Alphawave Views must be correctly named","standard_id":7837857267161810704439141202380776768,"display_sequence":null,"query_clob":"select 'N' pass_yn, \r\n       ao.object_name view_name, \r\n       apex_string.format('View `%0` should be suffixed with `_V`',\r\n              p0 => ao.object_name) code,\r\n       ao.object_id unqid,\r\n\t\t\t ao.owner schema\r\nfrom v_user_objects ao\r\nwhere ao.object_name not like '%_V'\r\nand ao.object_type = 'VIEW'\r\nand ao.owner not in ('SVT','AST')","test_code":"ALPH_VIEW_NAME","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":103,"explanation":"Views should have an \"\\_v\" suffix to the view name.","fix":"Fix the view name","version_number":1.3,"version_db":"REDWOOD"},{"test_id":7815139285722760313678955543995360374,"test_name":"Tables should have audit columns","standard_id":7837857267161810704439141202380776768,"display_sequence":10,"query_clob":"select case when utc.col_count is null\r\n            then 'N' \r\n            when utc.col_count < 4\r\n            then 'N' \r\n            else 'Y'\r\n            end pass_yn,\r\n       ao.object_name table_name,\r\n       ao.object_id unqid,\r\n       apex_string.format('Table `%0` is missing audit columns (`CREATED,CREATED_BY,UPDATED,UPDATED_BY`)', \r\n        p0 => ao.object_name) code,\r\n       ao.object_id,\r\n       coalesce(utc.col_count,0) col_count,\r\n\t\t\t ao.owner schema\r\nfrom v_user_objects ao\r\nleft outer join (select table_name, count(*) col_count\r\n                 from v_user_tab_cols\r\n                 where column_name in ('CREATED','CREATED_BY','UPDATED','UPDATED_BY')\r\n                 group by table_name\r\n                 ) utc on utc.table_name = ao.object_name\r\nwhere ao.object_type = 'TABLE'\r\nand ao.object_name not in (select mview_name\r\n                           from v_user_mviews)","test_code":"TBL_AUDIT_COLS","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":102,"explanation":"The following standard columns must be defined on application tables (exceptions to be agreed), and represent what we would typically refer to as \"audit\" columns. These should be maintained by a trigger.\r\n\r\n*   CREATED\\_BY VARCHAR2(255 CHAR)\r\n*   CREATED\\_ON DATE\r\n*   UPDATED\\_BY VARCHAR2(255 CHAR)\r\n*   UPDATED\\_ONDATE","fix":"Add the requisite audit columns","version_number":1.2,"version_db":"REDWOOD"},{"test_id":12936629185813362479325259195253795263,"test_name":"DML Triggers must have schema prefix for table","standard_id":7837857267161810704439141202380776768,"display_sequence":60,"query_clob":"select case when description like '%.%'\r\n         then 'Y'\r\n         else 'N'\r\n         end pass_yn,\r\n       ut.description,\r\n       ut.trigger_name, \r\n       apex_string.format('Trigger `%0` needs to prefix `%2` with the schema `%3` : `%1`',\r\n              p0 => ut.trigger_name,\r\n\t\t\t\t\t\t\tp1 => ut.description,\r\n\t\t\t\t\t\t\tp2 => ut.table_name,\r\n\t\t\t\t\t\t\tp3 => ut.table_owner) code,\r\n\t\t\t ut.owner schema,\r\n\t\t\t ut.table_name,\r\n\t\t\t ut.table_owner,\r\n       ut.object_id unqid --row-level unique id \r\nfrom v_user_triggers ut\r\nwhere 1=1","test_code":"TRIGGER_SCHEMA_PRFX_TBL","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":421,"explanation":"DML trigger needs to have schema prefix because the scripts need to be runnable as system","fix":"Add the schema prefix to the table","version_number":1,"version_db":"REDWOOD"},{"test_id":8261264065791203730481270360346253301,"test_name":"Use TIMESTAMP WITH TIME ZONE where appropriate","standard_id":7837857267161810704439141202380776768,"display_sequence":50,"query_clob":"with dt_ts as (select table_name, column_name, data_type, \r\n                case when data_type ='DATE'\r\n                     then 'N'\r\n                     when data_type like '%LOCAL%'\r\n                     then 'N'\r\n                     when data_type not like '%ZONE%'\r\n                     then 'N'\r\n                     else 'Y'\r\n                     end pass_yn\r\n            from v_user_tab_cols atc\r\n            where (data_type like '%TIMES%' or data_type  = 'DATE')\r\n        ),\r\n    lstag as (select table_name, listagg(column_name, ', ' on overflow truncate) within group (order by column_name) col_list\r\n                from dt_ts\r\n                where pass_yn = 'N'\r\n                group by table_name)\r\nselect 'N' pass_yn,\r\n       ao.object_name table_name, \r\n       ao.object_id unqid,\r\n       apex_string.format('The following columns in table `%0` should be changed to Timestamp with Local Time Zone : `%1`', \r\n        p0 => ao.object_name,\r\n        p1 => lstag.col_list) code,\r\n       ao.object_id,\r\n\t\t\t ao.owner schema\r\nfrom v_user_objects ao\r\ninner join lstag on ao.object_name = lstag.table_name\r\nwhere ao.object_type = 'TABLE'\r\nand ao.object_name not in (select mview_name\r\n                           from v_user_mviews)","test_code":"USE_TS_W_TZ","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":102,"explanation":"In most cases using TIMESTAMP WITH TIME ZONE is the safest option, rather than using DATE or TIMESTAMP WITH LOCAL TIME ZONE.","fix":"Change the column type :Â `alter table t modify col1 timestamp with time zone;`","version_number":1,"version_db":"AHA_APEX"},{"test_id":8255822348603598426387853492531521988,"test_name":"Use Char not Bytes","standard_id":7837857267161810704439141202380776768,"display_sequence":40,"query_clob":"with oc as (select  utc.table_name, listagg( utc.column_name, ', ' on overflow truncate) within group (order by utc.column_name) col_list\r\n            from v_user_tab_cols utc\r\n            where  utc.char_used = 'B'\r\n            group by utc.table_name)\r\nselect 'N' pass_yn,\r\n       ao.object_name table_name, \r\n       ao.object_id unqid,\r\n       apex_string.format('The following columns in table `%0` are the wrong character set: `%1`', \r\n        p0 => ao.object_name,\r\n        p1 => oc.col_list) code,\r\n       ao.object_id,\r\n       oc.col_list,\r\n\t\t\t ao.owner schema\r\nfrom v_user_objects ao\r\ninner join oc on ao.object_name = oc.table_name\r\nwhere ao.object_type = 'TABLE'\r\nand ao.object_name not in (select mview_name\r\n                           from v_user_mviews)","test_code":"USE_CHAR_NOT_BYTE","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":102,"explanation":"You want to specify CHAR storage because it is more practical than BYTE storage (a single character can require several bytes)","fix":"Alter the character set :Â `alter table t modify col_1 varchar2(xxx char);`","version_number":1,"version_db":"AHA_APEX"},{"test_id":8254315307149587389143920907370410801,"test_name":"These column datatypes are discouraged","standard_id":7837857267161810704439141202380776768,"display_sequence":30,"query_clob":"with thecols as (select table_name, listagg(column_name, ', ' on overflow truncate) within group (order by column_name) col_list\r\n                    from v_user_tab_cols\r\n                    where data_type in ('LONG','CHAR','VARCHAR')\r\n\t\t\t\t\t\t\t\t    and table_name not like '%MV%'\r\n                    group by table_name)\r\nselect 'N' pass_yn,\r\n       ao.object_name table_name, \r\n       ao.object_id unqid,\r\n       apex_string.format('The following columns in table `%0` are using Long, varchar or char : `%1`', \r\n        p0 => ao.object_name,\r\n        p1 => substr(thecols.col_list,1,50)) code, \r\n       ao.object_id,\r\n       ao.owner schema\r\nfrom v_user_objects ao\r\ninner join thecols on thecols.table_name = ao.object_name\r\nwhere ao.object_type = 'TABLE'","test_code":"ALPH_COL_DATATYPE","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":102,"explanation":null,"fix":null,"version_number":1.1,"version_db":"AHA_APEX"},{"test_id":7948072800402596473603882098144601653,"test_name":"Materialized Views should be named correctly","standard_id":7837857267161810704439141202380776768,"display_sequence":20,"query_clob":"select 'N' pass_yn, \r\n       ao.object_name mv_name, \r\n       apex_string.format('Materialized View `%0` should be suffixed with `_MV`',\r\n                          p0 => ao.object_name) code,\r\n       ao.object_id unqid,\r\n\t\t\t ao.owner schema\r\nfrom v_user_objects ao\r\nwhere ao.object_type = 'MATERIALIZED VIEW'\r\nand ao.object_name not like '%_MV'","test_code":"ALPH_MV_NAME","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":361,"explanation":"Materialized Views should be suffixed with \\`\\_MV\\`","fix":"Correct the MV name","version_number":1.2,"version_db":"REDWOOD"}]}    
