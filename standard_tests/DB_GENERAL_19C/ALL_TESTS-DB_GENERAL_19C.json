[{"STANDARD_ID":3,"TEST_ID":4779861535075110482539899022494417835,"LEVEL_ID":299712008894515240349432973583165583501,"URGENCY_LEVEL":40,"TEST_NAME":"Discouraged code","TEST_CODE":"DISCOURAGED_CODE","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"with qry as (select\r\n               case when lower(us.text) like '%nvl%'\r\n                    then 'NVL'\r\n                    when lower(us.text) like '%decode%'\r\n                    then 'CASE'\r\n                    when lower(us.text) like '% goto %'\r\n                    then 'GOTO'\r\n                    when lower(us.text) like '%apex_util.prepare_url%'\r\n                    then 'GET_URL'\r\n\t\t\t\t\t\t        when us.text like '%(+)%'\r\n                    then 'ANSI'\r\n                    end as child_code,\r\n               us.type object_type,\r\n               us.name object_name, \r\n               us.text code, \r\n               us.line ,\r\n               to_char(rank() over (partition by us.type, us.name, apex_string_util.to_slug(substr(us.text,1,255)) order by us.line)) as unqid\r\n               from v_user_source us\r\n               where us.name not like 'BIN$%'\r\n               and us.name not like 'XXX%'\r\n               and us.type in ('PACKAGE BODY','PACKAGE', 'PROCEDURE', 'FUNCTION')\r\n               ),\r\n     us as (\r\n          select 'COMMIT' child_code,\r\n                 u.object_type, \r\n\r\n                 u.object_name, \r\n                 'commit' code,\r\n                 u.line,\r\n                 u.signature unqid\r\n          from v_user_statements u\r\n          where u.type = 'COMMIT'\r\n     ), \r\n     tst as (select \r\n                 q.child_code,\r\n                 q.object_type, \r\n                 q.object_name, \r\n                 q.line, \r\n                 q.code, \r\n                 q.unqid\r\n            from qry q\r\n            where q.child_code is not null\r\n            union all \r\n            select \r\n                 u.child_code,\r\n                 u.object_type, \r\n                 u.object_name, \r\n                 u.line, \r\n                 u.code,\r\n                 u.unqid\r\n            from us u)\r\nselect 'N' pass_yn, \r\n      object_type, \r\n      object_name, \r\n      line, \r\n      apex_string.format('%0 (`%1` in `%2` line %3)',\r\n                        p0 => case child_code\r\n                              when 'ANSI' then 'ANSI SQL is discouraged'\r\n                              when 'NVL' then 'Use `coalesce` instead of `nvl`'\r\n                              when 'CASE' then 'Use `case` instead of `decode`'\r\n                              when 'GOTO' then '`GOTO` is discouraged'\r\n                              when 'COMMIT' then '`commits` are discouraged'\r\n\t\t\t\t\t\t\t\t\t\t\t\t      when 'GET_URL' then 'use `apex_page.get_url` instead of `prepare_url`'\r\n                              end,\r\n                        p1 => substr(trim(code),1,25),\r\n\t\t\t\t\t\t\t\t\t\t\t\tp2 => object_name,\r\n\t\t\t\t\t\t\t\t\t\t\t\tp3 => line\r\n                    ) code, \r\n      unqid\r\nfrom tst","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"Coding practices that are discouraged","FIX":"*   ANSI : Use ANSI SQL Syntax\r\n*   CASE : Replace with CASE statement\r\n*   COMMIT : Remove commit or at least add an explanatory comment\r\n*   GOTO : Remove GOTO or at least add an explanatory comment\r\n*   NVL : Replace nvl with coalesce\r\n*   GET\\_URL : user apex\\_page.get\\_url instead of apex\\_util.prepare\\_url","VERSION_NUMBER":1.4,"LIB_MD5":"5GDI_N1fMwX9sxpuPeh_1CXVKwj03KHGINcom6Kgw5PBzil6mfoIeunXYdbuWS9kjWp81JXlexanEXd4IHOb9g","LIB_IMPORTED_VERSION":1.4,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4779284014745511206179797702073957182,"LEVEL_ID":299712008894515240349432973583165583501,"URGENCY_LEVEL":40,"TEST_NAME":"Fix Invalid View","TEST_CODE":"VALID_VIEW","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_VIEW__0_NT","QUERY_CLOB":"select 'N' pass_yn, \r\n       ao.object_name view_name, \r\n       apex_string.format('View `%0` is invalid',\r\n              p0 => ao.object_name) code,\r\n       ao.object_id unqid\r\nfrom v_user_objects ao\r\nwhere ao.status != 'VALID'\r\nand ao.object_type = 'VIEW'","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":103,"COMPONENT_NAME":"DATABASE VIEW","EXPLANATION":"Views must be valid","FIX":"Fix the view and recompile","VERSION_NUMBER":1.1,"LIB_MD5":"N003CC1jbW5dYxIAO047v1WhMMEft87U0yb4YgK-KtzcAuqvK3l2p4ObIfHR_fmvrT4lG2yNSO5dgaXo88Gt1w","LIB_IMPORTED_VERSION":1.1,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4779284014741884428720953814549838654,"LEVEL_ID":299712008894515240349432973583165583501,"URGENCY_LEVEL":40,"TEST_NAME":"Naming Convention violation","TEST_CODE":"IDENTIFIER_NAMING","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"with var_assgn as (select signature, max(line) last_line\r\n                    from v_user_identifiers ui\r\n                    where ui.type = 'VARIABLE'\r\n                    and ui.usage = 'ASSIGNMENT'\r\n                    group by signature),\r\n     cur_ref_count\r\n            as (select signature, count(*) refcount\r\n                  from v_user_identifiers\r\n                  where usage = 'REFERENCE'\r\n                  and type = 'CONSTANT'\r\n                  group by signature),\r\n     ccode \r\n            as (select\r\n                case when ui.type = 'CONSTANT' \r\n                        then case when ui.object_type = 'PACKAGE'\r\n                                  then case when (ui.name not like 'GC_%') \r\n                                            then 'SPEC_CONSTANT'\r\n                                            end\r\n                                  when ui.object_type = 'PACKAGE BODY' \r\n                                    then case when ui.usage_context_id  = 1\r\n                                              then case when ui.name not like 'GC_%'\r\n                                                        then 'GLOBAL_CONSTANT'\r\n                                                        else case when crc.refcount < 2\r\n                                                                  then case when ui.name not in ('GC_SCOPE_PREFIX', 'GC_N', 'GC_Y')\r\n                                                                            then 'LOCAL_GLOBAL_CONSTANT'\r\n                                                                            end\r\n                                                                  end \r\n                                                        end\r\n                                              else case when  (ui.name not like 'C_%')\r\n                                                        then 'LOCAL_CONSTANT'\r\n                                                        end\r\n                                              end\r\n                                 end\r\n                     when ui.type = 'VARIABLE'\r\n                     then case when ui.object_type = 'PACKAGE'\r\n                               then 'SPEC_VARIABLE'\r\n                               when ui.object_type = 'PACKAGE BODY'\r\n                               then case when ui.line = va.last_line\r\n                                         then 'CONSTANT_VARIABLE'\r\n                                         end\r\n                               end\r\n                     when ui.type in ('CURSOR','REFCURSOR') \r\n                     then case when ui.name not like 'CUR_%'\r\n                               then 'CURSOR'\r\n                               end \r\n                     when ui.type in ('INDEX TABLE', 'NESTED TABLE', 'ASSOCIATIVE ARRAY') \r\n                     then case when ui.name not like 'T_%'\r\n                               then 'TABLE_TYPE'\r\n                               end\r\n                     when ui.type in ('FORMAL IN','FORMAL OUT', 'FORMAL IN OUT') \r\n                     then case when ui.name not like 'P_%'\r\n                               then 'PROC_PARAM'\r\n                               end\r\n                     when ui.type = 'RECORD'\r\n                     then case when ui.name not like 'R_%'\r\n                               then 'RECORD_TYPE'\r\n                               end \r\n                     when ui.type in ('BLOB DATATYPE','BOOLEAN DATATYPE','CHARACTER DATATYPE','CLOB DATATYPE','DATE DATATYPE','NUMBER DATATYPE', 'SUBTYPE','TIMESTAMP DATATYPE')\r\n                     then case when ui.name not like 'TY_%'\r\n                               then 'DATATYPE'\r\n                               end\r\n                     when ui.type = 'EXCEPTION'\r\n                     then case when ui.name not like 'E_%'\r\n                               then 'EXCEPTION'\r\n                               end\r\n                     end as child_code,\r\n                null src_id, \r\n                ui.object_name, \r\n                ui.name code, \r\n                ui.object_type, \r\n                ui.line,\r\n                to_char(ui.signature) unqid\r\n                from v_user_identifiers ui\r\n                left join var_assgn va on ui.signature = va.signature\r\n                left join cur_ref_count crc on ui.signature = crc.signature\r\n                where ui.usage = 'DECLARATION'\r\n                and ui.implicit = 'NO'\r\n                and ui.object_name not like 'XXX%')\r\nselect \r\ncase when child_code is null\r\n    then 'Y'\r\n    else 'N'\r\n    end pass_yn,\r\nobject_name,\r\napex_string.format('%0 %1 in `%2` %3, line %4',\r\n                    p0 => code,\r\n                    p1 => case child_code \r\n                          when 'CONSTANT_VARIABLE'\r\n                          then 'must be a constant (it is currently a variable)'\r\n                          when 'CURSOR'\r\n                          then 'must begin with cur_ (it is a cursor)'\r\n                          when 'DATATYPE'\r\n                          then 'must begin with ty_ (it is a datatype)'\r\n                          when 'EXCEPTION'\r\n                          then 'must begin with e_ (it is an Exception)'\r\n                          when 'GLOBAL_CONSTANT'\r\n                          then 'must begin with gc_ (it is a package body global constant)'\r\n                          when 'LOCAL_CONSTANT'\r\n                          then 'must begin with c_ (it is a package body local constant) '\r\n                          when 'LOCAL_GLOBAL_CONSTANT'\r\n                          then 'should be a local constant (it is currently a global constant)'\r\n                          when 'PROC_PARAM'\r\n                          then 'must begin with p_ (it is a procedure parameter)'\r\n                          when 'RECORD_TYPE'\r\n                          then 'must begin with r_ (it is a Record type)'\r\n                          when 'SPEC_CONSTANT'\r\n                          then 'must begin with gc_ (it is a package spec constant)'\r\n                          when 'SPEC_VARIABLE'\r\n                          then 'should be moved to the package body'\r\n                          when 'TABLE_TYPE'\r\n                          then 'must being with t_ (it is a Table type)'\r\n                          end,\r\n\t\t\t\t\t\t\t\t\t p2 => object_name,\r\n\t\t\t\t\t\t\t\t\t p3 => object_type,\r\n\t\t\t\t\t\t\t\t\t p4 => line\r\n) code,\r\nobject_type,\r\nline,\r\nunqid\r\nfrom ccode\r\nwhere child_code is not null","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"*   CONSTANT\\_VARIABLE : This variable should be a constant\r\n*   CURSOR : Cursor names must begin with cur\\_\r\n*   DATATYPE : Datatypes must begin with ty\\_\r\n*   EXCEPTION : Exceptions must begin with e\\_\r\n*   GLOBAL\\_CONSTANT : Package body global constants must begin with gc\\_\r\n*   LOCAL\\_CONSTANT : Package body local constants must begin with c\\_\r\n*   LOCAL\\_GLOBAL\\_CONSTANT : This global constant should be a local constant\r\n*   PROC\\_PARAM : Procedure parameters must begin with p\\_\r\n*   RECORD\\_TYPE : Record types must begin with r\\_\r\n*   SPEC\\_CONSTANT : Package spec constants must begin with gc\\_\r\n*   SPEC\\_VARIABLE : Variables in the package spec are discouraged\r\n*   TABLE\\_TYPE : Table types must begin with t\\_","FIX":"*   CONSTANT\\_VARIABLE : Make the variable a constant\r\n*   CURSOR : Fix the name\r\n*   DATATYPE : Fix the name\r\n*   EXCEPTION : Fix the name\r\n*   GLOBAL\\_CONSTANT : Fix the name\r\n*   LOCAL\\_CONSTANT : Fix the name\r\n*   LOCAL\\_GLOBAL\\_CONSTANT : Make it a local constant\r\n*   PROC\\_PARAM : Fix the name\r\n*   RECORD\\_TYPE : Fix the name\r\n*   SPEC\\_CONSTANT : Fix the name\r\n*   SPEC\\_VARIABLE : Remove the variable from the package spec\r\n*   TABLE\\_TYPE : Fix the name","VERSION_NUMBER":1.3,"LIB_MD5":"jgLvWdFCif5pgPpHt31euIyazeuPr1w8K8QlCJLrXjrmooJLi5ngiRY_diqujl-DrgqVpfWBn9aeq1FsKk0p5w","LIB_IMPORTED_VERSION":1.3,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4780852357769166117754694348744966172,"LEVEL_ID":299712008894515240349432973583165583501,"URGENCY_LEVEL":40,"TEST_NAME":"Duplicate Statements","TEST_CODE":"DUPLICATE_STATEMENTS","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"select\r\n'N' pass_yn,\r\nus.object_name, \r\nus.object_type,\r\nus.line, \r\napex_string.format('Consolidate instances of `%0` in `%1` %2', \r\n\t\t\t\t\t\t\t\t\t p0 => substr(trim(us.text),1,30),\r\n\t\t\t\t\t\t\t\t\t p1 => us.object_name,\r\n\t\t\t\t\t\t\t\t\t p2 => us.object_type) code,\r\nto_char(rank() over (partition by us.object_type, us.object_name, sc.sql_id order by us.line)|| sc.sql_id) as unqid\r\nfrom v_user_statements us\r\ninner join (select sql_id\r\n            from v_user_statements\r\n            where sql_id is not null \r\n            and object_name not like '%_UT' --this requirement does not apply to utplsql packages\r\n            having count(*) > 1\r\n            group by sql_id ) sc on sc.sql_id = us.sql_id\r\nwhere us.object_name not like '%_UT' --this requirement does not apply to utplsql packages\r\nand us.object_name not like 'XXX%' ","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"This statement appears more than once. Duplicate statements may cause inefficiency","FIX":"Consider consolidating the statements into a single function or procedure","VERSION_NUMBER":1.3,"LIB_MD5":"_oRNz5W556PcEYlEkI2cNsyQ803MWWp48t7tobhTYjX3qNyY40FeT0YED7QEYRer0K4J8ZqEJNr9tyQ-zPCkzg","LIB_IMPORTED_VERSION":1.3,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4780852357770375043574308977919672348,"LEVEL_ID":299712008894515240349432973583165583501,"URGENCY_LEVEL":40,"TEST_NAME":"Unused identifers","TEST_CODE":"UNUSED_IDENTIFIERS","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"with  declared_ids  \r\n            as (select object_name  \r\n                  , object_type  \r\n                  , name\r\n                  , type\r\n                  , signature\r\n                  , line\r\n                  from v_user_identifiers\r\n                  where usage = 'DECLARATION'\r\n                  and type in ('VARIABLE', 'EXCEPTION','CONSTANT')\r\n                  and implicit = 'NO'\r\n                  and object_name not like 'XXX%'\r\n                  and name not in ('C_LIMIT') -- hhh : the bulk collect limit value is not captured in the identifiers table\r\n                  ),  \r\n      used_ids\r\n            as (select signature, line\r\n                  from v_user_identifiers\r\n                  where usage in ('REFERENCE','ASSIGNMENT')\r\n               ),\r\n      intersct as (\r\n            select di.signature, count(*) it_count\r\n            from declared_ids di \r\n            inner join used_ids ui on di.signature = ui.signature\r\n                                   and di.line    != ui.line\r\n            group by di.signature\r\n      )\r\nselect \r\ncase when it.signature is null\r\n     then 'N'\r\n\t\t else 'Y'\r\n     end as pass_yn,\r\ndi.object_name, \r\ndi.object_type, \r\napex_string.format('Variable %0 should be dropped (it is unused)',di.name) code, \r\ndi.type,\r\ndi.line,\r\nto_char(di.signature) unqid\r\nfrom declared_ids di\r\nleft join intersct it on  di.signature = it.signature","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"This identifier has been declared but is not referenced anywhere.","FIX":"Remove the identifier or use it","VERSION_NUMBER":1.1,"LIB_MD5":"9L-3nqHeGKKoiDQf1UavBjkXl7xOzfVNY6o6AJJ2LvlkXGaz21g4aWL4HLz0q-ZWxJHBvLX_To_LN9MAI1rNQw","LIB_IMPORTED_VERSION":1.1,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4779861535076319408359513651669124011,"LEVEL_ID":299712008894516449275252588212340289677,"URGENCY_LEVEL":50,"TEST_NAME":"Missing Comments","TEST_CODE":"MISSING_COMMENT","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"with proc_declrtns as (\r\n    select line, name, object_name, signature, object_type\r\n    from v_user_identifiers\r\n    where type  in ('PROCEDURE','FUNCTION')\r\n    -- and object_type = 'PACKAGE'\r\n    and usage  = 'DECLARATION'\r\n    and object_name not like '%_UT' --this requirement does not apply to utplsql packages\r\n    and object_name not like 'XXX%')\r\nselect \r\ncase when trim(us.text) like '--%'\r\n     then 'Y'\r\n     else 'N'\r\n     end as pass_yn,\r\napex_string.format('%1 (line %2, %3) appears to be missing a comment', pd.object_name, pd.name, pd.line, us.type) code,\r\npd.object_name,\r\nus.type object_type,\r\npd.line,\r\nus.text,\r\nto_char(pd.signature) unqid\r\nfrom v_user_source us \r\ninner join proc_declrtns pd on  us.type = pd.object_type\r\n                            and us.name = pd.object_name\r\n                            and us.line = (pd.line - 1)","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"This procedure appears to be missing a comment or the comment is incorrectly formatted. All package procedures and functions require an explanatory comment","FIX":"Add a comment in the format:\r\n\r\n\\------------------------------------------------------------------------------  \r\n\\--  Creator: Hayden Hudson  \r\n\\--     Date: February 2, 2023  \r\n\\-- Synopsis:  \r\n\\--  \r\n\\-- Procedure, used to set employeed salary grade.    \r\n\\--  \r\n\\------------------------------------------------------------------------------","VERSION_NUMBER":1.1,"LIB_MD5":"NjUkIwY0kWeV1H9mPVBGL5dgoUItNty2nwmzSYaKUb88MU6jM6ZvCQc6HyoooaTdPWCzB5oytzpT-QlXCOnGpA","LIB_IMPORTED_VERSION":1.1,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4779704207516866597401398278021750051,"LEVEL_ID":319367883342216476462938320923089597344,"URGENCY_LEVEL":10,"TEST_NAME":"Foreign keys must be indexed","TEST_CODE":"FK_INDEXED","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_TBL__0_NT","QUERY_CLOB":"with tblfk as (select \r\ncons.table_name, \r\ncons.constraint_name,\r\ncons.cname1 || nvl2(cons.cname2,','||cons.cname2,null) ||\r\nnvl2(cons.cname3,','||cons.cname3,null) || nvl2(cons.cname4,','||cons.cname4,null) ||\r\nnvl2(cons.cname5,','||cons.cname5,null) || nvl2(cons.cname6,','||cons.cname6,null) ||\r\nnvl2(cons.cname7,','||cons.cname7,null) || nvl2(cons.cname8,','||cons.cname8,null) icolumns\r\nfrom ( select b.table_name,\r\n                b.constraint_name,\r\n                max(decode( position, 1, column_name, null )) cname1,\r\n                max(decode( position, 2, column_name, null )) cname2,\r\n                max(decode( position, 3, column_name, null )) cname3,\r\n                max(decode( position, 4, column_name, null )) cname4,\r\n                max(decode( position, 5, column_name, null )) cname5,\r\n                max(decode( position, 6, column_name, null )) cname6,\r\n                max(decode( position, 7, column_name, null )) cname7,\r\n                max(decode( position, 8, column_name, null )) cname8,\r\n                count(*) col_cnt\r\n            from (select substr(table_name,1,30) table_name,\r\n                        substr(constraint_name,1,30) constraint_name,\r\n                        substr(column_name,1,30) column_name,\r\n                        position\r\n                    from v_user_cons_columns ) a,\r\n                v_user_constraints b\r\n        where a.constraint_name = b.constraint_name\r\n            and b.constraint_type = 'R'\r\n        group by b.table_name, b.constraint_name\r\n        ) cons\r\nwhere cons.col_cnt > ALL\r\n        ( select count(*)\r\n            from v_user_ind_columns i\r\n            where i.table_name = cons.table_name\r\n            and i.column_name in (cname1, cname2, cname3, cname4,\r\n                                    cname5, cname6, cname7, cname8 )\r\n            and i.column_position <= cons.col_cnt\r\n            group by i.index_name\r\n        )\r\n)\r\nselect \r\n'N' pass_yn,\r\n'MISSING_FK :'||table_name unqid,\r\ntable_name, constraint_name, icolumns,\r\napex_string.format('Constraint %0 on column(s) %1 is missing an index', constraint_name, icolumns) code,\r\nao.object_id\r\nfrom tblfk\r\ninner join all_objects ao on ao.object_name = tblfk.table_name\r\n                          and ao.object_type = 'TABLE'","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":102,"COMPONENT_NAME":"DATABASE TABLE","EXPLANATION":"Foreign keys must be indexed","FIX":"Eg `create index eba_stdapp_idx1 on eba_stds_applications (type_id)`","VERSION_NUMBER":1.1,"LIB_MD5":"8A6pwdyIrAJ6fHUyXxetbNl1X2BZllciEpR39kMdGZUicLXN8AabEG_lcKQI0RZLNraspO7FgD7izcIbOmovkA","LIB_IMPORTED_VERSION":1.1,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4780852357767957191935079719570259996,"LEVEL_ID":319367883342218894314577550181439009696,"URGENCY_LEVEL":20,"TEST_NAME":"Missing DBMS_ASSERT","TEST_CODE":"DBMS_ASSERT","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"with userprocs as (select object_name, object_type, type, name proc_name, line start_line, LEAD(line, 1, 10000) OVER (partition by object_name ORDER BY line) end_line\r\n                    from v_user_identifiers\r\n                    where 1=1\r\n                    and object_type = 'PACKAGE BODY'\r\n                    and usage_context_id = 1\r\n                    and type in ('FUNCTION', 'PROCEDURE')\r\n                    and object_name not like 'XXX%'\r\n                    and sys_context( 'userenv', 'current_schema' ) not in ('UT_CARS')\r\n                    ),\r\n     exec_imm as (select object_name, line ei_line, signature\r\n                    from v_user_statements\r\n                    where type = 'EXECUTE IMMEDIATE'\r\n                    and object_type = 'PACKAGE BODY'\r\n                 ),\r\n     dass as (select name object_name, line da_line, text\r\n                from v_user_source\r\n                where lower(text) like '%dbms_assert%'\r\n                and type = 'PACKAGE BODY')\r\nselect \r\n'N' pass_yn,\r\nu.object_name, \r\nu.object_type, \r\napex_string.format('%0 should use dbms_assert to safely use `execute immediate`',u.proc_name) code, \r\nei.ei_line line, \r\nto_char(ei.signature) unqid\r\nfrom userprocs u\r\ninner join exec_imm ei on ei.object_name = u.object_name\r\n                       and ei.ei_line between u.start_line and u.end_line\r\nleft join dass da on da.object_name = u.object_name\r\n                  and da.da_line between u.start_line and u.end_line\r\nwhere da.da_line is null","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"\"Execute Immediate\" should be validated with DBMS\\_ASSERT : Input must be sanitized","FIX":"Use dbms\\_assert. If all else fails, you can always use `DBMS_ASSERT.NOOP`","VERSION_NUMBER":1.4,"LIB_MD5":"-Wjp719RdRTromAIMNgFp1sE5NdYngtBngkNStaxQNVA9KTbGjK4wUs-vrbt_H_nC-uGCsTHs8r6yxaYUxG0NA","LIB_IMPORTED_VERSION":1.4,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4779284014743093354540568443724544830,"LEVEL_ID":319367883342218894314577550181439009696,"URGENCY_LEVEL":20,"TEST_NAME":"Urgent PLSQL Warning","TEST_CODE":"URGENT_PLSQL_WARNINGS","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"select\r\n'N' pass_yn,\r\nae.name object_name, \r\nae.type object_type,\r\nae.line, \r\nae.text code,\r\napex_string.format('%0:%1:%2:%3', ae.name, ae.line, ae.message_number, ae.sequence) unqid,\r\nae.message_number, \r\nae.sequence,\r\nae.position,\r\nae.attribute\r\nfrom v_user_errors ae\r\nwhere ae.name not like 'XXX%'\r\nand ae.message_number > 1919 -- will not compile\r\nand (ae.message_number between 5000 and 5999 --severe according the to documentation\r\n     or -- informational according to the documentation, but severe according to me\r\n     ae.message_number in (6002, -- unreachable code\r\n                           6009, -- procedure \"string\" OTHERS handler does not end in RAISE\r\n                           6017 -- operation will raise an exception\r\n                           )\r\n    )\r\nand ae.message_number not in (5018)","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"This script has some important violations caught by enabling PLSQL\\_WARNINGS","FIX":"Address the PLSQL warning and recompile","VERSION_NUMBER":1.1,"LIB_MD5":"DGQI5HIE6qwG22DLqwHOBRHOfOc87QgHWQvXxPJPloLRi5inMTIrni7HGh2l9Oz6AyXn8OBOrzUe2FNxS_czZA","LIB_IMPORTED_VERSION":1.1,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"},{"STANDARD_ID":3,"TEST_ID":4779284014744302280360183072899251006,"LEVEL_ID":319367883342220103240397164810613715872,"URGENCY_LEVEL":30,"TEST_NAME":"Invalid Object","TEST_CODE":"VALID_OBJECTS","STANDARD_NAME":"DB General (19C)","ACTIVE_YN":"Y","NT_NAME":"V_SVT_DB_PLSQL_NT","QUERY_CLOB":"select  'N' pass_yn,\r\n        object_name,\r\n        object_type,\r\n        0 line,\r\n        apex_string.format('%0 is invalid', object_name) code,\r\n         'INVALID OBJECT : '||owner||'.'||object_name unqid\r\nfrom v_user_objects\r\nwhere status != 'VALID'","MV_DEPENDENCY":null,"SVT_COMPONENT_TYPE_ID":13,"COMPONENT_NAME":"DATABASE SUPPORTING OBJECT","EXPLANATION":"Object should be valid","FIX":"Make the object valid or drop the object","VERSION_NUMBER":1.2,"LIB_MD5":"QWTuXqCBcTFZxrFFHdhNJeVORGylRBoEUu6FCJg18EUA8tweIVm7Is_ASwR3udmR5jCvZJ1uVSiPAPyIBqk5PA","LIB_IMPORTED_VERSION":1.2,"PUBLISHED_YN":"Y","DOWNLOAD_CSS":"show t-Button t-Button--icon t-Button--simple","INHERITED_YN":"N","CALLING_STANDARD_NAME":"DB General (19C)"}]    
