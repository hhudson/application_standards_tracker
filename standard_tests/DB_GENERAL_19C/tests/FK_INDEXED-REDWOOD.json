{
  "standard" :
  [
    {
      "standard_id" : 3,
      "standard_name" : "General",
      "description" : "These tests describe general tests to run against DB objects",
      "compatibility_mode_id" : 21,
      "created" : "2023-04-12T03:33:01.498000Z",
      "created_by" : "AST",
      "updated" : "2023-04-12T03:33:01.498000Z",
      "updated_by" : "AST"
    }
  ],
  "test" :
  [
    {
      "test_id" : 4779704207516866597401398278021750051,
      "test_name" : "Foreign keys must be indexed",
      "standard_id" : 3,
      "display_sequence" : null,
      "query_clob" : "with tblfk as (select \r\ncons.table_name, \r\ncons.owner,\r\ncons.constraint_name,\r\ncons.cname1 || nvl2(cons.cname2,','||cons.cname2,null) ||\r\nnvl2(cons.cname3,','||cons.cname3,null) || nvl2(cons.cname4,','||cons.cname4,null) ||\r\nnvl2(cons.cname5,','||cons.cname5,null) || nvl2(cons.cname6,','||cons.cname6,null) ||\r\nnvl2(cons.cname7,','||cons.cname7,null) || nvl2(cons.cname8,','||cons.cname8,null) icolumns\r\nfrom ( select   b.owner,\r\n\t\t\t          b.table_name,\r\n                b.constraint_name,\r\n                max(decode( position, 1, column_name, null )) cname1,\r\n                max(decode( position, 2, column_name, null )) cname2,\r\n                max(decode( position, 3, column_name, null )) cname3,\r\n                max(decode( position, 4, column_name, null )) cname4,\r\n                max(decode( position, 5, column_name, null )) cname5,\r\n                max(decode( position, 6, column_name, null )) cname6,\r\n                max(decode( position, 7, column_name, null )) cname7,\r\n                max(decode( position, 8, column_name, null )) cname8,\r\n                count(*) col_cnt\r\n            from (select substr(table_name,1,30) table_name,\r\n                        substr(constraint_name,1,30) constraint_name,\r\n                        substr(column_name,1,30) column_name,\r\n                        position\r\n                    from v_user_cons_columns ) a,\r\n                v_user_constraints b\r\n        where a.constraint_name = b.constraint_name\r\n            and b.constraint_type = 'R'\r\n        group by b.owner,b.table_name, b.constraint_name\r\n        ) cons\r\nwhere cons.col_cnt > ALL\r\n        ( select count(*)\r\n            from v_user_ind_columns i\r\n            where i.table_name = cons.table_name\r\n            and i.column_name in (cname1, cname2, cname3, cname4,\r\n                                    cname5, cname6, cname7, cname8 )\r\n            and i.column_position <= cons.col_cnt\r\n            group by i.index_name\r\n        )\r\n)\r\nselect \r\n'N' pass_yn,\r\n'MISSING_FK :'||table_name unqid,\r\ntable_name, constraint_name, icolumns,\r\napex_string.format('Constraint %0 on column(s) %1 is missing an index', constraint_name, icolumns) code,\r\nao.object_id,\r\ntblfk.owner schema\r\nfrom tblfk\r\ninner join all_objects ao on ao.object_name = tblfk.table_name\r\n                          and ao.object_type = 'TABLE'",
      "test_code" : "FK_INDEXED",
      "level_id" : 319367883342216476462938320923089597344,
      "mv_dependency" : null,
      "svt_component_type_id" : 102,
      "explanation" : "Foreign keys must be indexed",
      "fix" : "EgÂ `create index svt_stdapp_idx1 on svt_stds_applications (type_id)`",
      "version_number" : 1.3,
      "version_db" : "REDWOOD"
    }
  ]
}    
