{"std_test":{"standard":{"standard_id":2,"standard_name":"Accessibility","description":"These tests help support Accessibility standards. They are not substitutes for screen reader tests and other manual tests.","compatibility_mode_id":1,"created":"2023-04-12T10:12:01.456000Z","created_by":"AST","updated":"2023-04-12T10:12:01.456000Z","updated_by":"AST"}},"test":[{"test_id":1650133487909152014174608946469562880,"test_name":"Static Content HTML is well formed","standard_id":2,"display_sequence":null,"query_clob":"select svt_stds_parser.valid_html_yn(aapr.region_source) pass_yn,                         \r\n       aapr.application_id, \r\n       aapr.page_id,\r\n       null created_by,\r\n       null created_on,\r\n       aapr.last_updated_by,\r\n       aapr.last_updated_on,\r\n       apex_string.format('Region `%0` (app %1, page %2) has malformed HTML : `%3`', \r\n        p0 => aapr.region_name, \r\n        p1 => aapr.application_id,\r\n        p2 => aapr.page_id,\r\n        p3 => substr(aapr.region_source,1,50)) validation_failure_message,\r\n       apex_string.format('Region `%0` (app %1, page %2) has malformed HTML', \r\n        p0 => aapr.region_name, \r\n        p1 => aapr.application_id,\r\n        p2 => aapr.page_id) issue_title,\r\n       aapr.region_id component_id,\r\n       null parent_component_id,\r\n       aapr.region_name,\r\n       aapr.template,\r\n       aapr.display_position,\r\n       aapr.source_type,\r\n       aapr.component_template_options,\r\n       aapr.report_template,\r\n       aapr.region_source,\r\n\t\t\t aapr.workspace\r\nfrom apex_application_page_regions aapr\r\ninner join apex_application_pages aap on aap.page_id = aapr.page_id and aap.application_id = aapr.application_id\r\nleft outer join apex_application_build_options aabo1 on aabo1.build_option_name = aap.build_option\r\n                                                     and aabo1.application_id = aap.application_id\r\nleft outer join apex_application_build_options aabo2 on aabo2.build_option_name = aapr.build_option\r\n                                                     and aabo2.application_id = aapr.application_id\r\nwhere aapr.workspace = svt_preferences.get('SVT_WORKSPACE')\r\nand coalesce(aabo1.status_on_export,'NA') != 'Exclude'\r\nand coalesce(aabo2.status_on_export,'NA') != 'Exclude'\r\nand aapr.source_type = 'HTML/Text'\r\nand aapr.region_source is not null","test_code":"STTC_CNTNT_BAD_HTML","level_id":319367883342220103240397164810613715872,"mv_dependency":null,"svt_component_type_id":5,"explanation":"HTML that doesn't close tags appropriately is often forgiven by browsers but screen readers can have more trouble. HTML must be checked strictly for appropriately opened and closed tags.\r\n\r\nChecking for matching HTML tags. This test is tied to the following WCAG Codes :\r\n\r\n1.  4.1.1(A) : Parsing : In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where the specifications allow these features.","fix":"This test will raise errors for void elements without closing slashes (eg `<br/>` and `<img />` will pass but `<br>` `<img>` will not ) . Technically, the closing slash is _optional_ on void elements but it may be simpler to just add the slash?","version_number":1.2,"version_db":"REDWOOD"}]}    
